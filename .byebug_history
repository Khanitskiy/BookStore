continue
continues
continue
continues
continue
@billing_address
continue
@billing_address
continue
@order
continue
@order
continue
@order
continue
@order
continue
@order
continue
@order
continue
@order
continue
params
@order
@order.billing_address
continue
@order.billing_address
@order
continue
params
request
user
continue
@cookies_book
continue
request.referer
continue
current_user?
current_user
continue
Book.bestsellers
continue
Book.bestsellers
continue
Book.bestsellers
Book.bestsellers.count
(Book.bestsellers.count
continue
continues
continue
order.save!
order.save
order
order.save!
order.total_price = order.total_price.to_f + price.to_f
order
order.save!
order.order_total =  order.delivery.to_f +  order.total_price.to_f
order.completed_date =  3.days.from_now
order.total_price = order.total_price.to_f + price
order.book_count = session
continue
params
order_params[:book_id]
continue
order.save!
order.delivery.to_f +  order.total_price.to_f
3.days.from_now
 order.total_price.to_f + price
session.class
session
continue
continu
@order.total_price.to_f
@order.total_price
a.class
a = price
price
continue
a
a= price
price
continue
order_params['book_id']
order_params[:book_id]
order_params.book_id
continue
continu
Order.find_by_id(@order.id)
@order
Order.find_by_id(@order.id)
@order
continue
Book.all
Book.search_books('r').all
Book.search_books('').all
Book.search_books('rspec').all
Book.search_books('Rspec').all
params[:value]
Book.search_books('Rspec').all
Book.search_books(params[:value]).all
params
continue
@books.first
@books
continue
rails s
root_path(:en)
root_path[en]
root_path[:en]
root_path(:en)
root_path
continue
root_path
root
root_url
exit
root_path
continue
countinue
countcontinue
count
continue
OrderItem.where(order_id: @order.id, book_id: i).first
continue
OrderItem.where(order_id: @order.id, book_id: i).first.quantity.to_i
OrderItem.where(order_id: @order.id, book_id: i).first.quantity
OrderItem.where(order_id: @order.id, book_id: i).first
OrderItem.where(order_id: @order.id, book_id: i)
OrderItem.find_by_id(1)
OrderItem.find_by_id(i)
i
continue
cookies
continue
cookies
continue
empty_cookies
continue
cookies
ciikies
continue
cupon.nil?
cupon
continue
cupon.use
cupon
continue
@order.cupon
@order
continue
@order.cupon
@order
@order.cupon
continue
 cupon.nil?
unless cupon.nil?
cupon.update(order_id: @order.id, use: true) unless cupon.nil?
cupon.nil?
continue
defined?(step)
step.exist
step.exist?
step.class
step.nil?
step.defined?
step.empty?
step.empty
a = step
continue
@order.cupon.discount
order_total - @order.cupon.discount
step == :complete
if step == :complete
step.nil?
continue
result_regular = string.match(regular_expression)
regular_expression = Regexp.new(params[:value], Regexp::IGNORECASE)
continue
string.sub(Regexp.new(params[:value], Regexp::IGNORECASE), "<span style='color: yellow'>#{params[:value]}</span>").html_safe
Regexp.new(string, Regexp::IGNORECASE)
string.sub(Regexp.new(params[:value], Regexp::IGNORECASE), "<span style='color: yellow'>#{params[:value]}</span>").html_safe
string.sub(Regexp.new(params[value], Regexp::IGNORECASE), "<span style='color: yellow'>#{params[:value]}</span>").html_safe
search = Regexp.new(string, Regexp::IGNORECASE)
Regexp.escape(string)
search = Regexp.new(Regexp.escape(string), Regexp::IGNORECASE)
search = Regexp.new(Regexp.escape(params, Regexp::IGNORECASE)
search = Regexp.new(Regexp.escape(params[:value]), Regexp::IGNORECASE)
search = Regexp.new(Regexp.escape(string, Regexp::IGNORECASE))
search = Regexp.new(Regexp.escape(string, Regexp::IGNORECASE)
string
string.sub(params[:value], "<span style='color: yellow'>#{params[:value]}</span>").html_safe
search = Regexp.new(Regexp.escape(string, Regexp::IGNORECASE)
search = Regexp.new(Regexp.escape(params[:value]), Regexp::IGNORECASE)
continue
params
params[:value]
@books
continue
super(resource)
@user
continue
@user
user.sign_in_count
user
continue
    book_id: book.first[3..-1].to_i, 
OrderItem.create!( order_id: order_id, 
@order_item.nil?
@order_item = OrderItem.where(order_id: order_id, book_id: book.first[3..-1].to_i).first
order_id
book.first[3..-1].to_i
book.first[3..-1].ti_i
book.first[3..-1]
book.first
@order_item = OrderItem.where(order_id: order_id, book_id: book.first[3..-1].to_
continue
@order_item = OrderItem.where(order_id: order_id, book_id: book.first[3..-1].to_i).first
@order_item = OrderItem.where(order_id: order_id, book_id: book.first[3..-1].to_i)
book.first == "book_count" || book.first == "total_price"
unless book.first == "book_count" || book.first == "total_price"
continue
@order_item.nil?
@order_item
@order_item = OrderItem.where(order_id: order_id, book_id: book.first[3..-1].to_i)
continue
book.first == "book_count"
continue
book
continue
@cookies_book["book_count"]
@cookies_book[:book_count]
@cookies_book
cookies["book_count"]
continue
 cookies["book_count"].to_i
continue
 session[:omniauth_login_locale] || I18n.default_locale
session[:omniauth_login_locale]
continue
session[:omniauth_login_locale]
continue
session[:omniauth_login_locale] == params[:locale] && params[:locale] == nil
params[:locale] == nil
session[:omniauth_login_locale] == params[:locale]
continue
session[:omniauth_login_locale]
continue
session[:omniauth_login_locale]
continue
session[:omniauth_login_locale]
continue
session[:omniauth_login_locale]
continue
session[:omniauth_login_locale] == params[:locale]
